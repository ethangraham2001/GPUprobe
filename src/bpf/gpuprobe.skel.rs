// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("gpuprobe_bpf")
            .map("num_mallocs", false)
            .map(".rodata.str1.1", false)
            .map("gpuprobe.rodata", false)
            .prog("malloc_enter")
            .prog("malloc_exit");
        builder.build()
    }
    pub struct OpenGpuprobeMaps<'obj> {
        pub num_mallocs: libbpf_rs::OpenMapMut<'obj>,
        pub rodata_str1_1: libbpf_rs::OpenMapMut<'obj>,
        pub rodata: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenGpuprobeMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut num_mallocs = None;
            let mut rodata_str1_1 = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "num_mallocs" => num_mallocs = Some(map),
                    ".rodata.str1.1" => rodata_str1_1 = Some(map),
                    "gpuprobe.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                num_mallocs: num_mallocs.expect("map `num_mallocs` not present"),
                rodata_str1_1: rodata_str1_1.expect("map `rodata_str1_1` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct GpuprobeMaps<'obj> {
        pub num_mallocs: libbpf_rs::MapMut<'obj>,
        pub rodata_str1_1: libbpf_rs::MapMut<'obj>,
        pub rodata: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> GpuprobeMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut num_mallocs = None;
            let mut rodata_str1_1 = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "num_mallocs" => num_mallocs = Some(map),
                    ".rodata.str1.1" => rodata_str1_1 = Some(map),
                    "gpuprobe.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                num_mallocs: num_mallocs.expect("map `num_mallocs` not present"),
                rodata_str1_1: rodata_str1_1.expect("map `rodata_str1_1` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenGpuprobeProgs<'obj> {
        pub malloc_enter: libbpf_rs::OpenProgramMut<'obj>,
        pub malloc_exit: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenGpuprobeProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut malloc_enter = None;
            let mut malloc_exit = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "malloc_enter" => malloc_enter = Some(prog),
                    "malloc_exit" => malloc_exit = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                malloc_enter: malloc_enter.expect("prog `malloc_enter` not present"),
                malloc_exit: malloc_exit.expect("prog `malloc_exit` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct GpuprobeProgs<'obj> {
        pub malloc_enter: libbpf_rs::ProgramMut<'obj>,
        pub malloc_exit: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> GpuprobeProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenGpuprobeProgs<'obj>) -> Self {
            Self {
                malloc_enter: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.malloc_enter.as_libbpf_object().as_mut(),
                    )
                },
                malloc_exit: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.malloc_exit.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct GpuprobeSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> GpuprobeSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGpuprobeSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenGpuprobeSkel {
                maps: unsafe { OpenGpuprobeMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenGpuprobeProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for GpuprobeSkelBuilder {
        type Output = OpenGpuprobeSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGpuprobeSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGpuprobeSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 2],
            pub key: *mut u32,
            pub value: *mut u64,
            pub max_entries: *mut [i32; 1],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    key: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct pt_regs {
            pub r15: u64,
            pub r14: u64,
            pub r13: u64,
            pub r12: u64,
            pub bp: u64,
            pub bx: u64,
            pub r11: u64,
            pub r10: u64,
            pub r9: u64,
            pub r8: u64,
            pub ax: u64,
            pub cx: u64,
            pub dx: u64,
            pub si: u64,
            pub di: u64,
            pub orig_ax: u64,
            pub ip: u64,
            pub __anon_2: __anon_2,
            pub flags: u64,
            pub sp: u64,
            pub __anon_3: __anon_3,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_2 {
            pub cs: u16,
            pub csx: u64,
            pub fred_cs: fred_cs,
        }
        impl std::fmt::Debug for __anon_2 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_2 {
            fn default() -> Self {
                Self { cs: u16::default() }
            }
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_3 {
            pub ss: u16,
            pub ssx: u64,
            pub fred_ss: fred_ss,
        }
        impl std::fmt::Debug for __anon_3 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_3 {
            fn default() -> Self {
                Self { ss: u16::default() }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct fred_cs {
            pub __pad_0: [u8; 8],
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct fred_ss {
            pub __pad_0: [u8; 8],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 4],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub num_mallocs: __anon_1,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }
    pub struct OpenGpuprobeSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenGpuprobeMaps<'obj>,
        pub progs: OpenGpuprobeProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenGpuprobeSkel<'obj> {
        type Output = GpuprobeSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<GpuprobeSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(GpuprobeSkel {
                maps: unsafe { GpuprobeMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: GpuprobeProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: GpuprobeLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct GpuprobeLinks {
        pub malloc_enter: Option<libbpf_rs::Link>,
        pub malloc_exit: Option<libbpf_rs::Link>,
    }
    pub struct GpuprobeSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: GpuprobeMaps<'obj>,
        pub progs: GpuprobeProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: GpuprobeLinks,
    }

    unsafe impl Send for GpuprobeSkel<'_> {}
    unsafe impl Sync for GpuprobeSkel<'_> {}

    impl<'obj> Skel<'obj> for GpuprobeSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = GpuprobeLinks {
                malloc_enter: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
                malloc_exit: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(1)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl GpuprobeSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 11, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 117, 112, 114, 111, 98, 101, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97,
        112, 115, 0, 46, 114, 111, 100, 97, 116, 97, 46, 115, 116, 114, 49, 46, 49, 0, 46, 114,
        111, 100, 97, 116, 97, 0, 103, 112, 117, 112, 114, 111, 98, 101, 46, 98, 112, 102, 46, 99,
        0, 76, 66, 66, 48, 95, 50, 0, 76, 66, 66, 48, 95, 51, 0, 95, 95, 95, 95, 109, 97, 108, 108,
        111, 99, 95, 101, 120, 105, 116, 46, 95, 95, 95, 95, 102, 109, 116, 0, 109, 97, 108, 108,
        111, 99, 95, 101, 110, 116, 101, 114, 0, 110, 117, 109, 95, 109, 97, 108, 108, 111, 99,
        115, 0, 109, 97, 108, 108, 111, 99, 95, 101, 120, 105, 116, 0, 76, 73, 67, 69, 78, 83, 69,
        0, 46, 114, 101, 108, 117, 112, 114, 111, 98, 101, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70,
        46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 61, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 3, 0, 168,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 3, 0, 8, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0,
        0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 17, 0, 5, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 18, 0, 3, 0, 24, 1, 0, 0, 0,
        0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0,
        0, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 24, 1, 0, 0, 112,
        114, 111, 103, 0, 0, 0, 0, 114, 97, 109, 0, 123, 26, 240, 255, 0, 0, 0, 0, 24, 1, 0, 0,
        105, 110, 118, 111, 0, 0, 0, 0, 107, 101, 100, 32, 123, 26, 232, 255, 0, 0, 0, 0, 191, 161,
        0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 232, 255, 255, 255, 183, 2, 0, 0, 16, 0, 0, 0, 133, 0, 0, 0,
        6, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 3, 0, 0, 0, 0, 0, 183, 1, 0,
        0, 1, 0, 0, 0, 219, 16, 0, 0, 0, 0, 0, 0, 5, 0, 12, 0, 0, 0, 0, 0, 183, 1, 0, 0, 100, 0, 0,
        0, 107, 26, 224, 255, 0, 0, 0, 0, 24, 1, 0, 0, 117, 112, 32, 102, 0, 0, 0, 0, 97, 105, 108,
        101, 123, 26, 216, 255, 0, 0, 0, 0, 24, 1, 0, 0, 109, 97, 112, 32, 0, 0, 0, 0, 108, 111,
        111, 107, 123, 26, 208, 255, 0, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 208, 255,
        255, 255, 183, 2, 0, 0, 18, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
        149, 0, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0,
        12, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0,
        71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 110, 118, 111, 107, 101, 100, 32, 112, 114, 111, 103,
        114, 97, 109, 0, 109, 97, 112, 32, 108, 111, 111, 107, 117, 112, 32, 102, 97, 105, 108,
        101, 100, 0, 109, 97, 108, 108, 111, 99, 32, 101, 120, 105, 116, 0, 0, 0, 112, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 159, 235,
        1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 92, 4, 0, 0, 92, 4, 0, 0, 93, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 29, 0, 0, 0, 0,
        0, 0, 8, 8, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 10, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 8, 11, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 8, 12, 0, 0, 0,
        58, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 14, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
        4, 32, 0, 0, 0, 77, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0,
        86, 0, 0, 0, 9, 0, 0, 0, 128, 0, 0, 0, 92, 0, 0, 0, 13, 0, 0, 0, 192, 0, 0, 0, 104, 0, 0,
        0, 0, 0, 0, 14, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 18, 0, 0, 0, 116, 0, 0, 0,
        21, 0, 0, 4, 168, 0, 0, 0, 124, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 19, 0, 0,
        0, 64, 0, 0, 0, 132, 0, 0, 0, 19, 0, 0, 0, 128, 0, 0, 0, 136, 0, 0, 0, 19, 0, 0, 0, 192, 0,
        0, 0, 140, 0, 0, 0, 19, 0, 0, 0, 0, 1, 0, 0, 143, 0, 0, 0, 19, 0, 0, 0, 64, 1, 0, 0, 146,
        0, 0, 0, 19, 0, 0, 0, 128, 1, 0, 0, 150, 0, 0, 0, 19, 0, 0, 0, 192, 1, 0, 0, 154, 0, 0, 0,
        19, 0, 0, 0, 0, 2, 0, 0, 157, 0, 0, 0, 19, 0, 0, 0, 64, 2, 0, 0, 160, 0, 0, 0, 19, 0, 0, 0,
        128, 2, 0, 0, 163, 0, 0, 0, 19, 0, 0, 0, 192, 2, 0, 0, 166, 0, 0, 0, 19, 0, 0, 0, 0, 3, 0,
        0, 169, 0, 0, 0, 19, 0, 0, 0, 64, 3, 0, 0, 172, 0, 0, 0, 19, 0, 0, 0, 128, 3, 0, 0, 175, 0,
        0, 0, 19, 0, 0, 0, 192, 3, 0, 0, 183, 0, 0, 0, 19, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 20, 0,
        0, 0, 64, 4, 0, 0, 186, 0, 0, 0, 19, 0, 0, 0, 128, 4, 0, 0, 192, 0, 0, 0, 19, 0, 0, 0, 192,
        4, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 5, 0, 0, 195, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0,
        0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 8, 0, 0, 0, 209, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
        0, 10, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
        8, 22, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 8, 23, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0,
        0, 16, 0, 0, 0, 216, 0, 0, 0, 3, 0, 0, 132, 8, 0, 0, 0, 209, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0,
        16, 249, 0, 0, 0, 10, 0, 0, 0, 16, 0, 0, 2, 252, 0, 0, 0, 10, 0, 0, 0, 18, 0, 0, 1, 0, 0,
        0, 0, 3, 0, 0, 5, 8, 0, 0, 0, 0, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 10, 0, 0, 0,
        0, 0, 0, 0, 7, 1, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 10, 0, 0, 132, 8, 0, 0, 0, 0,
        1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 16, 15, 1, 0, 0, 10, 0, 0, 0, 16, 0, 0, 1, 19, 1, 0, 0, 10,
        0, 0, 0, 17, 0, 0, 1, 27, 1, 0, 0, 10, 0, 0, 0, 18, 0, 0, 1, 31, 1, 0, 0, 10, 0, 0, 0, 32,
        0, 0, 8, 77, 0, 0, 0, 10, 0, 0, 0, 48, 0, 0, 4, 38, 1, 0, 0, 10, 0, 0, 0, 56, 0, 0, 1, 46,
        1, 0, 0, 10, 0, 0, 0, 57, 0, 0, 1, 49, 1, 0, 0, 10, 0, 0, 0, 58, 0, 0, 1, 56, 1, 0, 0, 10,
        0, 0, 0, 60, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 64, 1, 0, 0, 17, 0, 0, 0, 68, 1,
        0, 0, 1, 0, 0, 12, 27, 0, 0, 0, 81, 1, 0, 0, 1, 0, 0, 12, 27, 0, 0, 0, 93, 1, 0, 0, 0, 0,
        0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 0, 4, 0, 0, 0,
        4, 0, 0, 0, 98, 1, 0, 0, 0, 0, 0, 14, 31, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 30,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 33, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 106, 1,
        0, 0, 0, 0, 0, 14, 34, 0, 0, 0, 0, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 32, 0, 0,
        0, 0, 0, 0, 0, 4, 0, 0, 0, 72, 3, 0, 0, 1, 0, 0, 15, 32, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
        32, 0, 0, 0, 78, 3, 0, 0, 1, 0, 0, 15, 12, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0,
        0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69,
        95, 95, 0, 117, 51, 50, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115, 105, 103, 110, 101, 100,
        32, 105, 110, 116, 0, 117, 54, 52, 0, 95, 95, 117, 54, 52, 0, 117, 110, 115, 105, 103, 110,
        101, 100, 32, 108, 111, 110, 103, 32, 108, 111, 110, 103, 0, 116, 121, 112, 101, 0, 107,
        101, 121, 0, 118, 97, 108, 117, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101,
        115, 0, 110, 117, 109, 95, 109, 97, 108, 108, 111, 99, 115, 0, 112, 116, 95, 114, 101, 103,
        115, 0, 114, 49, 53, 0, 114, 49, 52, 0, 114, 49, 51, 0, 114, 49, 50, 0, 98, 112, 0, 98,
        120, 0, 114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0, 114, 56, 0, 97, 120, 0, 99, 120, 0,
        100, 120, 0, 115, 105, 0, 100, 105, 0, 111, 114, 105, 103, 95, 97, 120, 0, 105, 112, 0,
        102, 108, 97, 103, 115, 0, 115, 112, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108,
        111, 110, 103, 0, 99, 115, 0, 99, 115, 120, 0, 102, 114, 101, 100, 95, 99, 115, 0, 117, 49,
        54, 0, 95, 95, 117, 49, 54, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 115, 104, 111,
        114, 116, 0, 115, 108, 0, 119, 102, 101, 0, 115, 115, 0, 115, 115, 120, 0, 102, 114, 101,
        100, 95, 115, 115, 0, 115, 116, 105, 0, 115, 119, 101, 118, 101, 110, 116, 0, 110, 109,
        105, 0, 118, 101, 99, 116, 111, 114, 0, 101, 110, 99, 108, 97, 118, 101, 0, 108, 109, 0,
        110, 101, 115, 116, 101, 100, 0, 105, 110, 115, 110, 108, 101, 110, 0, 99, 116, 120, 0,
        109, 97, 108, 108, 111, 99, 95, 101, 110, 116, 101, 114, 0, 109, 97, 108, 108, 111, 99, 95,
        101, 120, 105, 116, 0, 99, 104, 97, 114, 0, 76, 73, 67, 69, 78, 83, 69, 0, 95, 95, 95, 95,
        109, 97, 108, 108, 111, 99, 95, 101, 120, 105, 116, 46, 95, 95, 95, 95, 102, 109, 116, 0,
        47, 104, 111, 109, 101, 47, 101, 116, 104, 97, 110, 47, 100, 101, 118, 47, 103, 112, 117,
        95, 112, 114, 111, 98, 101, 47, 115, 114, 99, 47, 98, 112, 102, 47, 103, 112, 117, 112,
        114, 111, 98, 101, 46, 98, 112, 102, 46, 99, 0, 105, 110, 116, 32, 66, 80, 70, 95, 75, 80,
        82, 79, 66, 69, 40, 109, 97, 108, 108, 111, 99, 95, 101, 110, 116, 101, 114, 44, 32, 115,
        105, 122, 101, 95, 116, 32, 115, 105, 122, 101, 41, 0, 9, 117, 51, 50, 32, 107, 101, 121,
        48, 32, 61, 32, 48, 59, 0, 9, 99, 104, 97, 114, 32, 109, 115, 103, 91, 93, 32, 61, 32, 34,
        105, 110, 118, 111, 107, 101, 100, 32, 112, 114, 111, 103, 114, 97, 109, 34, 59, 0, 9, 98,
        112, 102, 95, 116, 114, 97, 99, 101, 95, 112, 114, 105, 110, 116, 107, 40, 109, 115, 103,
        44, 32, 115, 105, 122, 101, 111, 102, 40, 109, 115, 103, 41, 41, 59, 0, 9, 109, 97, 108,
        108, 111, 99, 115, 32, 61, 32, 40, 117, 54, 52, 32, 42, 41, 98, 112, 102, 95, 109, 97, 112,
        95, 108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109, 40, 38, 110, 117, 109, 95, 109,
        97, 108, 108, 111, 99, 115, 44, 32, 38, 107, 101, 121, 48, 41, 59, 0, 9, 105, 102, 32, 40,
        109, 97, 108, 108, 111, 99, 115, 41, 32, 123, 0, 9, 9, 95, 95, 115, 121, 110, 99, 95, 102,
        101, 116, 99, 104, 95, 97, 110, 100, 95, 97, 100, 100, 40, 109, 97, 108, 108, 111, 99, 115,
        44, 32, 49, 41, 59, 0, 9, 9, 99, 104, 97, 114, 32, 110, 101, 119, 95, 109, 115, 103, 91,
        93, 32, 61, 32, 34, 109, 97, 112, 32, 108, 111, 111, 107, 117, 112, 32, 102, 97, 105, 108,
        101, 100, 34, 59, 0, 9, 9, 98, 112, 102, 95, 116, 114, 97, 99, 101, 95, 112, 114, 105, 110,
        116, 107, 40, 110, 101, 119, 95, 109, 115, 103, 44, 32, 115, 105, 122, 101, 111, 102, 40,
        110, 101, 119, 95, 109, 115, 103, 41, 41, 59, 0, 9, 98, 112, 102, 95, 112, 114, 105, 110,
        116, 107, 40, 34, 109, 97, 108, 108, 111, 99, 32, 101, 120, 105, 116, 34, 41, 59, 0, 105,
        110, 116, 32, 66, 80, 70, 95, 75, 82, 69, 84, 80, 82, 79, 66, 69, 40, 109, 97, 108, 108,
        111, 99, 95, 101, 120, 105, 116, 44, 32, 115, 105, 122, 101, 95, 116, 32, 115, 105, 122,
        101, 41, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 46, 114, 111,
        100, 97, 116, 97, 0, 117, 112, 114, 111, 98, 101, 0, 0, 0, 0, 0, 0, 0, 0, 159, 235, 1, 0,
        32, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 236, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 8,
        0, 0, 0, 86, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 24, 1, 0, 0, 29, 0, 0, 0, 16, 0,
        0, 0, 86, 3, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 130, 1, 0, 0, 179, 1, 0, 0, 0, 68, 0, 0, 8, 0,
        0, 0, 130, 1, 0, 0, 221, 1, 0, 0, 6, 76, 0, 0, 32, 0, 0, 0, 130, 1, 0, 0, 236, 1, 0, 0, 7,
        88, 0, 0, 72, 0, 0, 0, 130, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 130, 1, 0, 0, 13,
        2, 0, 0, 2, 92, 0, 0, 104, 0, 0, 0, 130, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
        130, 1, 0, 0, 50, 2, 0, 0, 19, 96, 0, 0, 136, 0, 0, 0, 130, 1, 0, 0, 110, 2, 0, 0, 6, 100,
        0, 0, 152, 0, 0, 0, 130, 1, 0, 0, 126, 2, 0, 0, 3, 104, 0, 0, 176, 0, 0, 0, 130, 1, 0, 0,
        162, 2, 0, 0, 8, 112, 0, 0, 248, 0, 0, 0, 130, 1, 0, 0, 202, 2, 0, 0, 3, 116, 0, 0, 8, 1,
        0, 0, 130, 1, 0, 0, 179, 1, 0, 0, 5, 68, 0, 0, 24, 1, 0, 0, 130, 1, 0, 0, 248, 2, 0, 0, 2,
        152, 0, 0, 56, 1, 0, 0, 130, 1, 0, 0, 20, 3, 0, 0, 5, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 184, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
        0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0,
        0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
        0, 0, 0, 0, 0, 0, 72, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 72, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 3, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 1, 0, 0, 0, 2,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 3, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0,
        9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 3, 0, 0, 0, 0, 0, 0, 32,
        0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
        0, 170, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0,
        0, 0, 0, 0, 209, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 175, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        152, 11, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
