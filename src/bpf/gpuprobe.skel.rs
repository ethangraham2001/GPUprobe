// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("gpuprobe_bpf")
            .map("num_cuda_malloc_calls", false)
            .map("alive_allocs", false)
            .map("cuda_malloc_failures", false)
            .map("gpuprobe.rodata", false)
            .map("gpuprobe.bss", true)
            .prog("trace_cuda_malloc")
            .prog("trace_cuda_malloc_ret");
        builder.build()
    }
    pub struct OpenGpuprobeMaps<'obj> {
        pub num_cuda_malloc_calls: libbpf_rs::OpenMapMut<'obj>,
        pub alive_allocs: libbpf_rs::OpenMapMut<'obj>,
        pub cuda_malloc_failures: libbpf_rs::OpenMapMut<'obj>,
        pub rodata: libbpf_rs::OpenMapMut<'obj>,
        pub bss: libbpf_rs::OpenMapMut<'obj>,
        pub bss_data: &'obj mut types::bss,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenGpuprobeMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut num_cuda_malloc_calls = None;
            let mut alive_allocs = None;
            let mut cuda_malloc_failures = None;
            let mut rodata = None;
            let mut bss = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "num_cuda_malloc_calls" => num_cuda_malloc_calls = Some(map),
                    "alive_allocs" => alive_allocs = Some(map),
                    "cuda_malloc_failures" => cuda_malloc_failures = Some(map),
                    "gpuprobe.rodata" => rodata = Some(map),
                    "gpuprobe.bss" => bss = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                num_cuda_malloc_calls: num_cuda_malloc_calls
                    .expect("map `num_cuda_malloc_calls` not present"),
                alive_allocs: alive_allocs.expect("map `alive_allocs` not present"),
                cuda_malloc_failures: cuda_malloc_failures
                    .expect("map `cuda_malloc_failures` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                bss: bss.expect("map `bss` not present"),
                bss_data: unsafe {
                    config
                        .map_mmap_ptr(4)
                        .expect("BPF map `bss` does not have mmap pointer")
                        .cast::<types::bss>()
                        .as_mut()
                        .expect("BPF map `bss` mmap pointer is NULL")
                },
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct GpuprobeMaps<'obj> {
        pub num_cuda_malloc_calls: libbpf_rs::MapMut<'obj>,
        pub alive_allocs: libbpf_rs::MapMut<'obj>,
        pub cuda_malloc_failures: libbpf_rs::MapMut<'obj>,
        pub rodata: libbpf_rs::MapMut<'obj>,
        pub bss: libbpf_rs::MapMut<'obj>,
        pub bss_data: &'obj mut types::bss,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> GpuprobeMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut num_cuda_malloc_calls = None;
            let mut alive_allocs = None;
            let mut cuda_malloc_failures = None;
            let mut rodata = None;
            let mut bss = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "num_cuda_malloc_calls" => num_cuda_malloc_calls = Some(map),
                    "alive_allocs" => alive_allocs = Some(map),
                    "cuda_malloc_failures" => cuda_malloc_failures = Some(map),
                    "gpuprobe.rodata" => rodata = Some(map),
                    "gpuprobe.bss" => bss = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                num_cuda_malloc_calls: num_cuda_malloc_calls
                    .expect("map `num_cuda_malloc_calls` not present"),
                alive_allocs: alive_allocs.expect("map `alive_allocs` not present"),
                cuda_malloc_failures: cuda_malloc_failures
                    .expect("map `cuda_malloc_failures` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                bss: bss.expect("map `bss` not present"),
                bss_data: unsafe {
                    config
                        .map_mmap_ptr(4)
                        .expect("BPF map `bss` does not have mmap pointer")
                        .cast::<types::bss>()
                        .as_mut()
                        .expect("BPF map `bss` mmap pointer is NULL")
                },
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenGpuprobeProgs<'obj> {
        pub trace_cuda_malloc: libbpf_rs::OpenProgramMut<'obj>,
        pub trace_cuda_malloc_ret: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenGpuprobeProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut trace_cuda_malloc = None;
            let mut trace_cuda_malloc_ret = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "trace_cuda_malloc" => trace_cuda_malloc = Some(prog),
                    "trace_cuda_malloc_ret" => trace_cuda_malloc_ret = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                trace_cuda_malloc: trace_cuda_malloc.expect("prog `trace_cuda_malloc` not present"),
                trace_cuda_malloc_ret: trace_cuda_malloc_ret
                    .expect("prog `trace_cuda_malloc_ret` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct GpuprobeProgs<'obj> {
        pub trace_cuda_malloc: libbpf_rs::ProgramMut<'obj>,
        pub trace_cuda_malloc_ret: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> GpuprobeProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenGpuprobeProgs<'obj>) -> Self {
            Self {
                trace_cuda_malloc: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.trace_cuda_malloc.as_libbpf_object().as_mut(),
                    )
                },
                trace_cuda_malloc_ret: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.trace_cuda_malloc_ret.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct GpuprobeSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> GpuprobeSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGpuprobeSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenGpuprobeSkel {
                maps: unsafe { OpenGpuprobeMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenGpuprobeProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for GpuprobeSkelBuilder {
        type Output = OpenGpuprobeSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGpuprobeSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGpuprobeSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 2],
            pub key: *mut u32,
            pub value: *mut u64,
            pub max_entries: *mut [i32; 1],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    key: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_2 {
            pub r#type: *mut [i32; 1],
            pub key: *mut u64,
            pub value: *mut u64,
            pub max_entries: *mut [i32; 10240],
        }
        impl Default for __anon_2 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    key: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct pt_regs {
            pub r15: u64,
            pub r14: u64,
            pub r13: u64,
            pub r12: u64,
            pub bp: u64,
            pub bx: u64,
            pub r11: u64,
            pub r10: u64,
            pub r9: u64,
            pub r8: u64,
            pub ax: u64,
            pub cx: u64,
            pub dx: u64,
            pub si: u64,
            pub di: u64,
            pub orig_ax: u64,
            pub ip: u64,
            pub __anon_3: __anon_3,
            pub flags: u64,
            pub sp: u64,
            pub __anon_4: __anon_4,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_3 {
            pub cs: u16,
            pub csx: u64,
            pub fred_cs: fred_cs,
        }
        impl std::fmt::Debug for __anon_3 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_3 {
            fn default() -> Self {
                Self { cs: u16::default() }
            }
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_4 {
            pub ss: u16,
            pub ssx: u64,
            pub fred_ss: fred_ss,
        }
        impl std::fmt::Debug for __anon_4 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_4 {
            fn default() -> Self {
                Self { ss: u16::default() }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct fred_cs {
            pub __pad_0: [u8; 8],
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct fred_ss {
            pub __pad_0: [u8; 8],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub num_cuda_malloc_calls: __anon_1,
            pub alive_allocs: __anon_2,
            pub cuda_malloc_failures: __anon_1,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct bss {
            pub ptr_addr: *mut *mut std::ffi::c_void,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 4],
        }
    }
    pub struct OpenGpuprobeSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenGpuprobeMaps<'obj>,
        pub progs: OpenGpuprobeProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenGpuprobeSkel<'obj> {
        type Output = GpuprobeSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<GpuprobeSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(GpuprobeSkel {
                maps: unsafe { GpuprobeMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: GpuprobeProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: GpuprobeLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct GpuprobeLinks {
        pub trace_cuda_malloc: Option<libbpf_rs::Link>,
        pub trace_cuda_malloc_ret: Option<libbpf_rs::Link>,
    }
    pub struct GpuprobeSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: GpuprobeMaps<'obj>,
        pub progs: GpuprobeProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: GpuprobeLinks,
    }

    unsafe impl Send for GpuprobeSkel<'_> {}
    unsafe impl Sync for GpuprobeSkel<'_> {}

    impl<'obj> Skel<'obj> for GpuprobeSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = GpuprobeLinks {
                trace_cuda_malloc: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
                trace_cuda_malloc_ret: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(1)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl GpuprobeSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 13, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 117, 112, 114, 111, 98, 101, 47, 99, 117, 100, 97, 77, 97, 108, 108, 111, 99, 0,
        117, 114, 101, 116, 112, 114, 111, 98, 101, 47, 99, 117, 100, 97, 77, 97, 108, 108, 111,
        99, 0, 46, 109, 97, 112, 115, 0, 46, 114, 111, 100, 97, 116, 97, 0, 46, 98, 115, 115, 0,
        108, 105, 99, 101, 110, 115, 101, 0, 103, 112, 117, 112, 114, 111, 98, 101, 46, 98, 112,
        102, 46, 99, 0, 76, 66, 66, 48, 95, 50, 0, 76, 66, 66, 48, 95, 52, 0, 116, 114, 97, 99,
        101, 95, 99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 46, 95, 95, 95, 95, 102, 109,
        116, 0, 76, 66, 66, 49, 95, 50, 0, 116, 114, 97, 99, 101, 95, 99, 117, 100, 97, 95, 109,
        97, 108, 108, 111, 99, 95, 114, 101, 116, 46, 95, 95, 95, 95, 102, 109, 116, 0, 76, 66, 66,
        49, 95, 52, 0, 116, 114, 97, 99, 101, 95, 99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99,
        95, 114, 101, 116, 46, 95, 95, 95, 95, 102, 109, 116, 46, 49, 0, 116, 114, 97, 99, 101, 95,
        99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 0, 110, 117, 109, 95, 99, 117, 100, 97,
        95, 109, 97, 108, 108, 111, 99, 95, 99, 97, 108, 108, 115, 0, 97, 108, 105, 118, 101, 95,
        97, 108, 108, 111, 99, 115, 0, 116, 114, 97, 99, 101, 95, 99, 117, 100, 97, 95, 109, 97,
        108, 108, 111, 99, 95, 114, 101, 116, 0, 112, 116, 114, 95, 97, 100, 100, 114, 0, 76, 73,
        67, 69, 78, 83, 69, 0, 99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 95, 102, 97, 105,
        108, 117, 114, 101, 115, 0, 46, 114, 101, 108, 117, 112, 114, 111, 98, 101, 47, 99, 117,
        100, 97, 77, 97, 108, 108, 111, 99, 0, 46, 114, 101, 108, 117, 114, 101, 116, 112, 114,
        111, 98, 101, 47, 99, 117, 100, 97, 77, 97, 108, 108, 111, 99, 0, 46, 66, 84, 70, 0, 46,
        66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
        0, 0, 0, 0, 3, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 3,
        0, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 4, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 145, 0, 0, 0, 1, 0, 6, 0, 26, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 175, 0, 0,
        0, 0, 0, 4, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 1, 0, 6, 0,
        54, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0,
        0, 0, 0, 0, 0, 232, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
        254, 0, 0, 0, 17, 0, 5, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 11, 1, 0, 0,
        18, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 33, 1, 0, 0, 17, 0, 7, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 42, 1, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 50, 1, 0, 0, 17, 0, 5, 0, 64, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 191, 22, 0, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0,
        0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 2, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0,
        0, 0, 219, 16, 0, 0, 0, 0, 0, 0, 121, 97, 112, 0, 0, 0, 0, 0, 123, 26, 240, 255, 0, 0, 0,
        0, 121, 97, 104, 0, 0, 0, 0, 0, 123, 26, 232, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0,
        7, 2, 0, 0, 240, 255, 255, 255, 191, 163, 0, 0, 0, 0, 0, 0, 7, 3, 0, 0, 232, 255, 255, 255,
        24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 2,
        0, 0, 0, 21, 0, 4, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2,
        0, 0, 26, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
        0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 19, 0, 0, 0, 0, 0, 0, 191, 161,
        0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 248, 255, 255, 255, 183, 2, 0, 0, 8, 0, 0, 0, 133, 0, 0, 0,
        112, 0, 0, 0, 21, 0, 5, 0, 0, 0, 0, 0, 24, 1, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        183, 2, 0, 0, 28, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 121, 163, 248,
        255, 0, 0, 0, 0, 21, 3, 4, 0, 0, 0, 0, 0, 24, 1, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        183, 2, 0, 0, 17, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 117, 112,
        100, 97, 116, 101, 32, 104, 97, 115, 104, 32, 109, 97, 112, 0, 117, 110, 97, 98, 108, 101,
        32, 116, 111, 32, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 100, 101, 118, 95, 112,
        116, 114, 0, 97, 108, 108, 111, 99, 97, 116, 101, 100, 95, 112, 116, 114, 61, 37, 112, 0,
        0, 71, 80, 76, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 0, 0, 152, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11,
        0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0,
        0, 0, 0, 204, 5, 0, 0, 204, 5, 0, 0, 239, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0,
        0, 4, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 6, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0,
        0, 35, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 0,
        48, 0, 0, 0, 0, 0, 0, 8, 11, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 8, 12, 0, 0, 0, 58, 0, 0, 0, 0,
        0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 77,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 86, 0, 0, 0, 9, 0,
        0, 0, 128, 0, 0, 0, 92, 0, 0, 0, 13, 0, 0, 0, 192, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 14, 15,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 18, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 8, 19, 0,
        0, 0, 133, 0, 0, 0, 0, 0, 0, 8, 20, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 8, 21, 0, 0, 0, 166, 0,
        0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 23, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0,
        0, 0, 77, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 86, 0, 0,
        0, 17, 0, 0, 0, 128, 0, 0, 0, 92, 0, 0, 0, 22, 0, 0, 0, 192, 0, 0, 0, 180, 0, 0, 0, 0, 0,
        0, 14, 24, 0, 0, 0, 1, 0, 0, 0, 193, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 2, 28, 0, 0, 0, 214, 0, 0, 0, 21, 0, 0, 4, 168, 0, 0, 0, 222, 0, 0, 0, 21,
        0, 0, 0, 0, 0, 0, 0, 226, 0, 0, 0, 21, 0, 0, 0, 64, 0, 0, 0, 230, 0, 0, 0, 21, 0, 0, 0,
        128, 0, 0, 0, 234, 0, 0, 0, 21, 0, 0, 0, 192, 0, 0, 0, 238, 0, 0, 0, 21, 0, 0, 0, 0, 1, 0,
        0, 241, 0, 0, 0, 21, 0, 0, 0, 64, 1, 0, 0, 244, 0, 0, 0, 21, 0, 0, 0, 128, 1, 0, 0, 248, 0,
        0, 0, 21, 0, 0, 0, 192, 1, 0, 0, 252, 0, 0, 0, 21, 0, 0, 0, 0, 2, 0, 0, 255, 0, 0, 0, 21,
        0, 0, 0, 64, 2, 0, 0, 2, 1, 0, 0, 21, 0, 0, 0, 128, 2, 0, 0, 5, 1, 0, 0, 21, 0, 0, 0, 192,
        2, 0, 0, 8, 1, 0, 0, 21, 0, 0, 0, 0, 3, 0, 0, 11, 1, 0, 0, 21, 0, 0, 0, 64, 3, 0, 0, 14, 1,
        0, 0, 21, 0, 0, 0, 128, 3, 0, 0, 17, 1, 0, 0, 21, 0, 0, 0, 192, 3, 0, 0, 25, 1, 0, 0, 21,
        0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 64, 4, 0, 0, 28, 1, 0, 0, 21, 0, 0, 0, 128,
        4, 0, 0, 34, 1, 0, 0, 21, 0, 0, 0, 192, 4, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 5, 0, 0, 0, 0,
        0, 0, 3, 0, 0, 5, 8, 0, 0, 0, 37, 1, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0, 10, 0, 0,
        0, 0, 0, 0, 0, 44, 1, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 52, 1, 0, 0, 0, 0, 0, 8, 31, 0, 0, 0,
        56, 1, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 62, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 16, 0, 0, 0, 44,
        1, 0, 0, 3, 0, 0, 132, 8, 0, 0, 0, 37, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 16, 77, 1, 0, 0, 10,
        0, 0, 0, 16, 0, 0, 2, 80, 1, 0, 0, 10, 0, 0, 0, 18, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 5, 8, 0,
        0, 0, 84, 1, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 87, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 91, 1, 0,
        0, 35, 0, 0, 0, 0, 0, 0, 0, 91, 1, 0, 0, 10, 0, 0, 132, 8, 0, 0, 0, 84, 1, 0, 0, 10, 0, 0,
        0, 0, 0, 0, 16, 99, 1, 0, 0, 10, 0, 0, 0, 16, 0, 0, 1, 103, 1, 0, 0, 10, 0, 0, 0, 17, 0, 0,
        1, 111, 1, 0, 0, 10, 0, 0, 0, 18, 0, 0, 1, 115, 1, 0, 0, 10, 0, 0, 0, 32, 0, 0, 8, 77, 0,
        0, 0, 10, 0, 0, 0, 48, 0, 0, 4, 122, 1, 0, 0, 10, 0, 0, 0, 56, 0, 0, 1, 130, 1, 0, 0, 10,
        0, 0, 0, 57, 0, 0, 1, 133, 1, 0, 0, 10, 0, 0, 0, 58, 0, 0, 1, 140, 1, 0, 0, 10, 0, 0, 0,
        60, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 148, 1, 0, 0, 27, 0, 0, 0, 152, 1, 0, 0,
        1, 0, 0, 12, 36, 0, 0, 0, 170, 1, 0, 0, 1, 0, 0, 12, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,
        40, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        0, 0, 0, 39, 0, 0, 0, 4, 0, 0, 0, 26, 0, 0, 0, 197, 1, 0, 0, 0, 0, 0, 14, 41, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 223, 1,
        0, 0, 0, 0, 0, 14, 43, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 39, 0, 0,
        0, 4, 0, 0, 0, 28, 0, 0, 0, 232, 1, 0, 0, 0, 0, 0, 14, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 39, 0, 0, 0, 4, 0, 0, 0, 17, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 14, 48,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 40, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0,
        0, 38, 2, 0, 0, 0, 0, 0, 14, 50, 0, 0, 0, 1, 0, 0, 0, 173, 4, 0, 0, 3, 0, 0, 15, 96, 0, 0,
        0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 25, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 26, 0, 0,
        0, 64, 0, 0, 0, 32, 0, 0, 0, 179, 4, 0, 0, 3, 0, 0, 15, 71, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0,
        0, 26, 0, 0, 0, 47, 0, 0, 0, 26, 0, 0, 0, 28, 0, 0, 0, 49, 0, 0, 0, 54, 0, 0, 0, 17, 0, 0,
        0, 187, 4, 0, 0, 1, 0, 0, 15, 8, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 192, 4, 0,
        0, 1, 0, 0, 15, 4, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 105, 110, 116, 0, 95,
        95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 117, 51, 50, 0,
        95, 95, 117, 51, 50, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0, 117,
        54, 52, 0, 95, 95, 117, 54, 52, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111,
        110, 103, 32, 108, 111, 110, 103, 0, 116, 121, 112, 101, 0, 107, 101, 121, 0, 118, 97, 108,
        117, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0, 110, 117, 109, 95, 99,
        117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 95, 99, 97, 108, 108, 115, 0, 115, 105, 122,
        101, 95, 116, 0, 95, 95, 107, 101, 114, 110, 101, 108, 95, 115, 105, 122, 101, 95, 116, 0,
        95, 95, 107, 101, 114, 110, 101, 108, 95, 117, 108, 111, 110, 103, 95, 116, 0, 117, 110,
        115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 0, 97, 108, 105, 118, 101, 95, 97,
        108, 108, 111, 99, 115, 0, 99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 95, 102, 97,
        105, 108, 117, 114, 101, 115, 0, 112, 116, 95, 114, 101, 103, 115, 0, 114, 49, 53, 0, 114,
        49, 52, 0, 114, 49, 51, 0, 114, 49, 50, 0, 98, 112, 0, 98, 120, 0, 114, 49, 49, 0, 114, 49,
        48, 0, 114, 57, 0, 114, 56, 0, 97, 120, 0, 99, 120, 0, 100, 120, 0, 115, 105, 0, 100, 105,
        0, 111, 114, 105, 103, 95, 97, 120, 0, 105, 112, 0, 102, 108, 97, 103, 115, 0, 115, 112, 0,
        99, 115, 0, 99, 115, 120, 0, 102, 114, 101, 100, 95, 99, 115, 0, 117, 49, 54, 0, 95, 95,
        117, 49, 54, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 115, 104, 111, 114, 116, 0,
        115, 108, 0, 119, 102, 101, 0, 115, 115, 0, 115, 115, 120, 0, 102, 114, 101, 100, 95, 115,
        115, 0, 115, 116, 105, 0, 115, 119, 101, 118, 101, 110, 116, 0, 110, 109, 105, 0, 118, 101,
        99, 116, 111, 114, 0, 101, 110, 99, 108, 97, 118, 101, 0, 108, 109, 0, 110, 101, 115, 116,
        101, 100, 0, 105, 110, 115, 110, 108, 101, 110, 0, 99, 116, 120, 0, 116, 114, 97, 99, 101,
        95, 99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 0, 116, 114, 97, 99, 101, 95, 99,
        117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 95, 114, 101, 116, 0, 99, 104, 97, 114, 0,
        116, 114, 97, 99, 101, 95, 99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 46, 95, 95,
        95, 95, 102, 109, 116, 0, 112, 116, 114, 95, 97, 100, 100, 114, 0, 116, 114, 97, 99, 101,
        95, 99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 95, 114, 101, 116, 46, 95, 95, 95,
        95, 102, 109, 116, 0, 116, 114, 97, 99, 101, 95, 99, 117, 100, 97, 95, 109, 97, 108, 108,
        111, 99, 95, 114, 101, 116, 46, 95, 95, 95, 95, 102, 109, 116, 46, 49, 0, 76, 73, 67, 69,
        78, 83, 69, 0, 47, 104, 111, 109, 101, 47, 101, 116, 104, 97, 110, 47, 100, 101, 118, 47,
        103, 112, 117, 95, 112, 114, 111, 98, 101, 47, 115, 114, 99, 47, 98, 112, 102, 47, 103,
        112, 117, 112, 114, 111, 98, 101, 46, 98, 112, 102, 46, 99, 0, 105, 110, 116, 32, 116, 114,
        97, 99, 101, 95, 99, 117, 100, 97, 95, 109, 97, 108, 108, 111, 99, 40, 115, 116, 114, 117,
        99, 116, 32, 112, 116, 95, 114, 101, 103, 115, 32, 42, 99, 116, 120, 41, 0, 9, 117, 51, 50,
        32, 107, 101, 121, 48, 32, 61, 32, 48, 59, 0, 9, 110, 117, 109, 95, 109, 97, 108, 108, 111,
        99, 115, 32, 61, 32, 98, 112, 102, 95, 109, 97, 112, 95, 108, 111, 111, 107, 117, 112, 95,
        101, 108, 101, 109, 40, 38, 110, 117, 109, 95, 99, 117, 100, 97, 95, 109, 97, 108, 108,
        111, 99, 95, 99, 97, 108, 108, 115, 44, 32, 38, 107, 101, 121, 48, 41, 59, 0, 9, 105, 102,
        32, 40, 110, 117, 109, 95, 109, 97, 108, 108, 111, 99, 115, 41, 32, 123, 0, 9, 9, 95, 95,
        115, 121, 110, 99, 95, 102, 101, 116, 99, 104, 95, 97, 110, 100, 95, 97, 100, 100, 40, 110,
        117, 109, 95, 109, 97, 108, 108, 111, 99, 115, 44, 32, 49, 41, 59, 0, 9, 100, 101, 118, 95,
        112, 116, 114, 32, 61, 32, 40, 118, 111, 105, 100, 42, 42, 41, 80, 84, 95, 82, 69, 71, 83,
        95, 80, 65, 82, 77, 49, 40, 99, 116, 120, 41, 59, 0, 9, 115, 105, 122, 101, 32, 61, 32, 40,
        115, 105, 122, 101, 95, 116, 41, 80, 84, 95, 82, 69, 71, 83, 95, 80, 65, 82, 77, 50, 40,
        99, 116, 120, 41, 59, 0, 9, 105, 102, 32, 40, 98, 112, 102, 95, 109, 97, 112, 95, 117, 112,
        100, 97, 116, 101, 95, 101, 108, 101, 109, 40, 38, 97, 108, 105, 118, 101, 95, 97, 108,
        108, 111, 99, 115, 44, 32, 38, 100, 101, 118, 95, 112, 116, 114, 44, 32, 38, 115, 105, 122,
        101, 44, 32, 48, 98, 48, 41, 41, 32, 123, 0, 9, 9, 98, 112, 102, 95, 112, 114, 105, 110,
        116, 107, 40, 34, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 117, 112, 100, 97, 116,
        101, 32, 104, 97, 115, 104, 32, 109, 97, 112, 34, 41, 59, 0, 9, 114, 101, 116, 117, 114,
        110, 32, 48, 59, 0, 9, 9, 9, 9, 112, 116, 114, 95, 97, 100, 100, 114, 41, 41, 32, 123, 0,
        9, 105, 102, 32, 40, 98, 112, 102, 95, 112, 114, 111, 98, 101, 95, 114, 101, 97, 100, 95,
        117, 115, 101, 114, 40, 38, 97, 108, 108, 111, 99, 97, 116, 101, 100, 95, 112, 116, 114,
        44, 32, 115, 105, 122, 101, 111, 102, 40, 97, 108, 108, 111, 99, 97, 116, 101, 100, 95,
        112, 116, 114, 41, 44, 32, 92, 0, 9, 9, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40,
        34, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 114, 101, 97, 100, 32, 102, 114, 111,
        109, 32, 100, 101, 118, 95, 112, 116, 114, 34, 41, 59, 0, 9, 105, 102, 32, 40, 97, 108,
        108, 111, 99, 97, 116, 101, 100, 95, 112, 116, 114, 41, 32, 123, 0, 9, 9, 98, 112, 102, 95,
        112, 114, 105, 110, 116, 107, 40, 34, 97, 108, 108, 111, 99, 97, 116, 101, 100, 95, 112,
        116, 114, 61, 37, 112, 34, 44, 32, 97, 108, 108, 111, 99, 97, 116, 101, 100, 95, 112, 116,
        114, 41, 59, 0, 125, 0, 48, 58, 49, 52, 0, 48, 58, 49, 51, 0, 46, 109, 97, 112, 115, 0, 46,
        114, 111, 100, 97, 116, 97, 0, 46, 98, 115, 115, 0, 108, 105, 99, 101, 110, 115, 101, 0,
        117, 112, 114, 111, 98, 101, 47, 99, 117, 100, 97, 77, 97, 108, 108, 111, 99, 0, 117, 114,
        101, 116, 112, 114, 111, 98, 101, 47, 99, 117, 100, 97, 77, 97, 108, 108, 111, 99, 0, 0, 0,
        0, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 36, 0, 0, 0, 148, 1, 0, 0,
        184, 1, 0, 0, 44, 0, 0, 0, 8, 0, 0, 0, 200, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0,
        218, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 16, 0, 0, 0, 200, 4, 0, 0, 15, 0, 0, 0,
        0, 0, 0, 0, 46, 2, 0, 0, 95, 2, 0, 0, 0, 120, 0, 0, 16, 0, 0, 0, 46, 2, 0, 0, 138, 2, 0, 0,
        6, 128, 0, 0, 32, 0, 0, 0, 46, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 46, 2, 0, 0,
        153, 2, 0, 0, 16, 148, 0, 0, 64, 0, 0, 0, 46, 2, 0, 0, 220, 2, 0, 0, 6, 152, 0, 0, 80, 0,
        0, 0, 46, 2, 0, 0, 240, 2, 0, 0, 3, 156, 0, 0, 88, 0, 0, 0, 46, 2, 0, 0, 24, 3, 0, 0, 20,
        168, 0, 0, 96, 0, 0, 0, 46, 2, 0, 0, 24, 3, 0, 0, 10, 168, 0, 0, 104, 0, 0, 0, 46, 2, 0, 0,
        63, 3, 0, 0, 17, 172, 0, 0, 112, 0, 0, 0, 46, 2, 0, 0, 63, 3, 0, 0, 7, 172, 0, 0, 128, 0,
        0, 0, 46, 2, 0, 0, 24, 3, 0, 0, 20, 168, 0, 0, 152, 0, 0, 0, 46, 2, 0, 0, 99, 3, 0, 0, 6,
        180, 0, 0, 184, 0, 0, 0, 46, 2, 0, 0, 99, 3, 0, 0, 6, 180, 0, 0, 192, 0, 0, 0, 46, 2, 0, 0,
        164, 3, 0, 0, 3, 184, 0, 0, 224, 0, 0, 0, 46, 2, 0, 0, 207, 3, 0, 0, 2, 196, 0, 0, 218, 4,
        0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 46, 2, 0, 0, 218, 3, 0, 0, 5, 248, 0, 0, 32, 0, 0, 0, 46, 2,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 46, 2, 0, 0, 235, 3, 0, 0, 6, 244, 0, 0, 56, 0,
        0, 0, 46, 2, 0, 0, 235, 3, 0, 0, 6, 244, 0, 0, 64, 0, 0, 0, 46, 2, 0, 0, 45, 4, 0, 0, 3,
        252, 0, 0, 104, 0, 0, 0, 46, 2, 0, 0, 90, 4, 0, 0, 6, 12, 1, 0, 112, 0, 0, 0, 46, 2, 0, 0,
        90, 4, 0, 0, 6, 12, 1, 0, 120, 0, 0, 0, 46, 2, 0, 0, 112, 4, 0, 0, 3, 16, 1, 0, 152, 0, 0,
        0, 46, 2, 0, 0, 161, 4, 0, 0, 1, 32, 1, 0, 16, 0, 0, 0, 200, 4, 0, 0, 2, 0, 0, 0, 88, 0, 0,
        0, 28, 0, 0, 0, 163, 4, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 28, 0, 0, 0, 168, 4, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 132, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 200, 1, 0, 0, 0, 0, 0, 0, 200, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 3, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 1, 0,
        0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 4, 0, 0, 0, 0, 0, 0, 168, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
        0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 5, 0, 0, 0, 0, 0,
        0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 62, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 5,
        0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 208, 5, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 208, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 5, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
        0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 93, 1, 0, 0, 9, 0, 0, 0,
        64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0,
        0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 118, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 6, 0, 0, 0, 0, 0, 0,
        211, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 123, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17,
        0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
